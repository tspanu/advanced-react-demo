{"id":"../node_modules/airbnb-prop-types/build/numericString.js","dependencies":[{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/numericString.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/package.json","includedInParent":true,"mtime":1543309168837},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/.babelrc","includedInParent":true,"mtime":1543309084056},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/package.json","includedInParent":true,"mtime":1542929074985},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"prop-types","loc":{"line":5,"column":25},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/numericString.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/prop-types/index.js"},{"name":"./helpers/wrapValidator","loc":{"line":7,"column":29},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/numericString.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/helpers/wrapValidator.js"}],"generated":{"js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nvar validator = function () {\n  function numericString(props, propName, componentName) {\n    if (props[propName] == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    var stringError = _propTypes.string.apply(undefined, [props, propName, componentName].concat(rest));\n    if (stringError) {\n      return stringError;\n    }\n\n    var value = props[propName];\n\n    var passesRegex = validNumericChars.test(value);\n    if (passesRegex) {\n      return null;\n    }\n\n    return new TypeError(String(componentName) + ': prop \"' + String(propName) + '\" (value \"' + String(value) + '\") must be a numeric string:\\n    - starting with an optional + or -\\n    - that does not have a leading zero\\n    - with an optional decimal part (that contains only one decimal point, if present)\\n    - that otherwise only contains digits (0-9)\\n    - not +-NaN, or +-Infinity\\n  ');\n  }\n\n  return numericString;\n}();\n\nvalidator.isRequired = function () {\n  function numericStringRequired(props, propName, componentName) {\n    if (props[propName] == null) {\n      return new TypeError(String(componentName) + ': ' + String(propName) + ' is required');\n    }\n\n    for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return validator.apply(undefined, [props, propName, componentName].concat(rest));\n  }\n\n  return numericStringRequired;\n}();\n\nexports['default'] = function () {\n  return (0, _wrapValidator2['default'])(validator, 'numericString');\n};\n","map":{"version":3,"sources":["../src/numericString.js"],"names":["validNumericChars","validator","numericString","props","propName","componentName","rest","stringError","string","value","passesRegex","test","TypeError","isRequired","numericStringRequired"],"mappings":";;;;AAAA;;AACA;;;;;;AAEA,IAAMA,oBAAoB,iDAA1B;;AAEA,IAAMC;AAAY,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;AAChF,QAAIF,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAH+E,sCAANE,IAAM;AAANA,UAAM;AAAA;;AAKhF,QAAMC,cAAcC,oCAAOL,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CC,IAA1C,EAApB;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,QAAME,QAAQN,MAAMC,QAAN,CAAd;;AAEA,QAAMM,cAAcV,kBAAkBW,IAAlB,CAAuBF,KAAvB,CAApB;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,WAAO,IAAIE,SAAJ,QAAiBP,aAAjB,wBAAyCD,QAAzC,0BAA8DK,KAA9D,iSAAP;AAOD;;AAxBK,SAAqBP,aAArB;AAAA,GAAN;;AA0BAD,UAAUY,UAAV;AAAuB,WAASC,qBAAT,CAA+BX,KAA/B,EAAsCC,QAAtC,EAAgDC,aAAhD,EAAwE;AAC7F,QAAIF,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAIQ,SAAJ,QAAiBP,aAAjB,kBAAmCD,QAAnC,mBAAP;AACD;;AAH4F,uCAANE,IAAM;AAANA,UAAM;AAAA;;AAI7F,WAAOL,4BAAUE,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,SAA6CC,IAA7C,EAAP;AACD;;AALD,SAAgCQ,qBAAhC;AAAA;;qBAOe;AAAA,SAAM,gCAAcb,SAAd,EAAyB,eAAzB,CAAN;AAAA,C","file":"numericString.js","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nconst validator = function numericString(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  const stringError = string(props, propName, componentName, ...rest);\n  if (stringError) {\n    return stringError;\n  }\n\n  const value = props[propName];\n\n  const passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}: prop \"${propName}\" (value \"${value}\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  `);\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return new TypeError(`${componentName}: ${propName} is required`);\n  }\n  return validator(props, propName, componentName, ...rest);\n};\n\nexport default () => wrapValidator(validator, 'numericString');\n"]}},"hash":"3a9b41ec66667f6b692b954c32561762","cacheData":{"env":{}}}
{"id":"../node_modules/airbnb-prop-types/build/shape.js","dependencies":[{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/shape.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/package.json","includedInParent":true,"mtime":1543095023469},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/.babelrc","includedInParent":true,"mtime":1543093658556},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/package.json","includedInParent":true,"mtime":1542929074985},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"./helpers/isPlainObject","loc":{"line":6,"column":29},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/shape.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/helpers/isPlainObject.js"},{"name":"./helpers/wrapValidator","loc":{"line":10,"column":29},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/shape.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/helpers/wrapValidator.js"}],"generated":{"js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = shapeValidator;\n\nvar _isPlainObject = require('./helpers/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction shapeValidator(shapeTypes) {\n  if (!(0, _isPlainObject2['default'])(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n    // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n    for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n      rest[_key - 4] = arguments[_key];\n    }\n\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (checker) {\n        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));\n        if (error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n\n  shape.isRequired = function () {\n    function shapeRequired(props, propName, componentName) {\n      var propValue = props[propName];\n\n      if (propValue == null) {\n        return new TypeError(String(componentName) + ': ' + String(propName) + ' is required.');\n      }\n\n      for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        rest[_key2 - 3] = arguments[_key2];\n      }\n\n      return shape.apply(undefined, [props, propName, componentName].concat(rest));\n    }\n\n    return shapeRequired;\n  }();\n\n  return (0, _wrapValidator2['default'])(shape, 'shape', shapeTypes);\n}\n","map":{"version":3,"sources":["../src/shape.js"],"names":["shapeValidator","shapeTypes","TypeError","shape","props","propName","componentName","location","propValue","rest","key","checker","error","isRequired","shapeRequired"],"mappings":";;;qBAGwBA,c;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,cAAT,CAAwBC,UAAxB,EAAoC;AACjD,MAAI,CAAC,gCAAcA,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,WAASC,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,aAAhC,EAA+CC,QAA/C,EAAkE;AAAA,QAC5CC,SAD4C,GAC9BJ,KAD8B,CACvDC,QADuD;;AAEhE,QAAIG,aAAa,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;AACD;AACA;;AANgE,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAOhE,SAAK,IAAMC,GAAX,IAAkBT,UAAlB,EAA8B;AAC5B,UAAMU,UAAUV,WAAWS,GAAX,CAAhB;AACA,UAAIC,OAAJ,EAAa;AACX,YAAMC,QAAQD,0BACZH,SADY,EAEZE,GAFY,EAGZJ,aAHY,EAIZC,QAJY,SAKTE,IALS,EAAd;AAOA,YAAIG,KAAJ,EAAW;AACT,iBAAOA,KAAP;AACD;AACF;AACF;AACD,WAAO,IAAP;AACD;;AAEDT,QAAMU,UAAN;AAAmB,aAASC,aAAT,CAAuBV,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;AAAA,UAC7DE,SAD6D,GAC/CJ,KAD+C,CACxEC,QADwE;;AAEjF,UAAIG,aAAa,IAAjB,EAAuB;AACrB,eAAO,IAAIN,SAAJ,QAAiBI,aAAjB,kBAAmCD,QAAnC,oBAAP;AACD;;AAJgF,yCAANI,IAAM;AAANA,YAAM;AAAA;;AAKjF,aAAON,wBAAMC,KAAN,EAAaC,QAAb,EAAuBC,aAAvB,SAAyCG,IAAzC,EAAP;AACD;;AAND,WAA4BK,aAA5B;AAAA;;AAQA,SAAO,gCAAcX,KAAd,EAAqB,OAArB,EAA8BF,UAA9B,CAAP;AACD","file":"shape.js","sourcesContent":["import isPlainObject from './helpers/isPlainObject';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function shapeValidator(shapeTypes) {\n  if (!isPlainObject(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return null;\n    }\n    // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n    for (const key in shapeTypes) {\n      const checker = shapeTypes[key];\n      if (checker) {\n        const error = checker(\n          propValue,\n          key,\n          componentName,\n          location,\n          ...rest,\n        );\n        if (error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n\n  shape.isRequired = function shapeRequired(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return new TypeError(`${componentName}: ${propName} is required.`);\n    }\n    return shape(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(shape, 'shape', shapeTypes);\n}\n"]}},"hash":"ffac81a29bba8fa81b5779f2c2d669eb","cacheData":{"env":{}}}
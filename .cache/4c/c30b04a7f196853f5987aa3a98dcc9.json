{"id":"../node_modules/airbnb-prop-types/build/stringStartsWith.js","dependencies":[{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/stringStartsWith.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/package.json","includedInParent":true,"mtime":1542930367368},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/.babelrc","includedInParent":true,"mtime":1540760186263},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/package.json","includedInParent":true,"mtime":1542929074985},{"name":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"prop-types","loc":{"line":6,"column":25},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/stringStartsWith.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/prop-types/index.js"},{"name":"./helpers/wrapValidator","loc":{"line":8,"column":29},"parent":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/stringStartsWith.js","resolved":"/Users/tspanu/Code/react-course-projects/expensify-app/node_modules/airbnb-prop-types/build/helpers/wrapValidator.js"}],"generated":{"js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = stringStartsWithValidator;\n\nvar _propTypes = require('prop-types');\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  var validator = function () {\n    function stringStartsWith(props, propName, componentName) {\n      var propValue = props[propName];\n\n\n      if (propValue == null) {\n        return null;\n      }\n\n      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        rest[_key - 3] = arguments[_key];\n      }\n\n      var stringError = _propTypes.string.apply(undefined, [props, propName, componentName].concat(rest));\n      if (stringError) {\n        return stringError;\n      }\n\n      if (!propValue.startsWith(start) || propValue.length <= start.length) {\n        return new TypeError(String(componentName) + ': ' + String(propName) + ' does not start with \"' + String(start) + '\"');\n      }\n      return null;\n    }\n\n    return stringStartsWith;\n  }();\n\n  validator.isRequired = function () {\n    function requiredStringStartsWith() {\n      var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);\n      if (stringError) {\n        return stringError;\n      }\n      return validator.apply(undefined, arguments);\n    }\n\n    return requiredStringStartsWith;\n  }();\n\n  return (0, _wrapValidator2['default'])(validator, 'stringStartsWith: ' + String(start));\n}\n","map":{"version":3,"sources":["../src/stringStartsWith.js"],"names":["stringStartsWithValidator","start","length","TypeError","validator","stringStartsWith","props","propName","componentName","propValue","rest","stringError","string","startsWith","isRequired","requiredStringStartsWith"],"mappings":";;;qBAGwBA,yB;;AAHxB;;AACA;;;;;;AAEe,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;AACvD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,MAAMC,MAAN,KAAiB,CAAlD,EAAqD;AACnD,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED,MAAMC;AAAY,aAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAmE;AAAA,UAC/DC,SAD+D,GACjDH,KADiD,CAC1EC,QAD0E;;;AAGnF,UAAIE,aAAa,IAAjB,EAAuB;AACrB,eAAO,IAAP;AACD;;AALkF,wCAANC,IAAM;AAANA,YAAM;AAAA;;AAOnF,UAAMC,cAAcC,oCAAON,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CE,IAA1C,EAApB;AACA,UAAIC,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;;AAED,UAAI,CAACF,UAAUI,UAAV,CAAqBZ,KAArB,CAAD,IAAgCQ,UAAUP,MAAV,IAAoBD,MAAMC,MAA9D,EAAsE;AACpE,eAAO,IAAIC,SAAJ,QAAiBK,aAAjB,kBAAmCD,QAAnC,sCAAoEN,KAApE,QAAP;AACD;AACD,aAAO,IAAP;AACD;;AAhBK,WAAqBI,gBAArB;AAAA,KAAN;;AAkBAD,YAAUU,UAAV;AAAuB,aAASC,wBAAT,GAA2C;AAChE,UAAMJ,cAAcC,kBAAOE,UAAP,oCAApB;AACA,UAAIH,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;AACD,aAAOP,qCAAP;AACD;;AAND,WAAgCW,wBAAhC;AAAA;;AAQA,SAAO,gCAAcX,SAAd,gCAA8CH,KAA9C,EAAP;AACD","file":"stringStartsWith.js","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringStartsWith(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(`${componentName}: ${propName} does not start with \"${start}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringStartsWith: ${start}`);\n}\n"]}},"hash":"ebf8759499f73e0191ff2d7c20bfa140","cacheData":{"env":{}}}